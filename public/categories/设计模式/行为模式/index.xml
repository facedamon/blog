<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式/行为模式 on FaceDamon`s Blog</title>
    <link>http://facedamon.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式/行为模式 on FaceDamon`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="http://facedamon.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[设计模式 | 行为模式 | 模板模式]</title>
      <link>http://facedamon.github.io/post/design-patterns/behavior-type/templates/</link>
      <pubDate>Tue, 15 Oct 2019 14:59:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/design-patterns/behavior-type/templates/</guid>
      <description>转载自https://www.cnblogs.com/java-my-life/ 概述 准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形</description>
    </item>
    
    <item>
      <title>[设计模式 | 行为模式 | 解释器模式]</title>
      <link>http://facedamon.github.io/post/design-patterns/behavior-type/interpreter/</link>
      <pubDate>Tue, 15 Oct 2019 14:28:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/design-patterns/behavior-type/interpreter/</guid>
      <description>转载自https://www.cnblogs.com/java-my-life/ 概述 给定一个语言后,解释器模式可以定义出其文法的一种表示,并</description>
    </item>
    
    <item>
      <title>[设计模式 | 行为模式 |观察者模式]</title>
      <link>http://facedamon.github.io/post/design-patterns/behavior-type/observer/</link>
      <pubDate>Tue, 15 Oct 2019 11:40:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/design-patterns/behavior-type/observer/</guid>
      <description>转载自https://www.cnblogs.com/java-my-life/ 概述 观察者模式是对象的行为模式，又叫发布-订阅(Publis</description>
    </item>
    
    <item>
      <title>[设计模式 | 行为模式 | 迭代器模式]</title>
      <link>http://facedamon.github.io/post/design-patterns/behavior-type/lterator/</link>
      <pubDate>Tue, 15 Oct 2019 11:37:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/design-patterns/behavior-type/lterator/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[设计模式 | 行为模式 | 策略模式]</title>
      <link>http://facedamon.github.io/post/design-patterns/behavior-type/strategy/</link>
      <pubDate>Tue, 15 Oct 2019 10:48:56 +0800</pubDate>
      
      <guid>http://facedamon.github.io/post/design-patterns/behavior-type/strategy/</guid>
      <description>转载自https://www.cnblogs.com/java-my-life/ 概述 策略模式属于对象的行为模式。其用意是针对一组算法，将每一</description>
    </item>
    
  </channel>
</rss>